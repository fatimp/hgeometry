cabal-version:      3.4
name:               hgeometry-point
version:            1.0.0.0
synopsis:
        d-dimensional Points
description:
        d-dimensional Points with an optimized vector representation.
license:            MIT
license-file:       LICENSE
author:             Frank Staals
maintainer:         frank@fstaals.net
-- copyright:
category:           Geometry
build-type:         Simple
extra-doc-files:    CHANGELOG.md
-- extra-source-files:

tested-with: GHC == 9.2.5

--------------------------------------------------------------------------------
-- common setup-extras
--     build-depends:
--         aeson                   >= 2.1

common setup
    ghc-options: -O2 -Wall -fno-warn-unticked-promoted-constructors -fno-warn-type-defaults
                -fspecialise-aggressively -fexpose-all-unfoldings

    build-depends:
        base                    >= 4.16.1.0      &&  < 5
      , hgeometry-combinatorial >= 1.0.0.0
      , containers              >= 0.6
      , vector                  >= 0.13
      , lens                    >= 5.2
      , deepseq                 >= 1.1
      , semigroupoids           >= 5
      , semigroups              >= 0.18
      , random                  >= 1.2
      , witherable              >= 0.4
      , linear                  >= 1.21
      , data-clist              >= 0.2


      , ghc-typelits-natnormalise >= 0.7.7
      , ghc-typelits-knownnat     >= 0.7.6

    default-language: GHC2021

    default-extensions:
        DataKinds
      , TypeFamilies
      , GADTs
      , KindSignatures
      , ScopedTypeVariables
      , DerivingStrategies
      , DerivingVia
      , GeneralizedNewtypeDeriving
      , DeriveGeneric
      , DeriveFunctor
      , PatternSynonyms
      , TupleSections
      , LambdaCase
      , ViewPatterns
      , FunctionalDependencies

common test-setup
    ghc-options:
         -Wall
         -fno-warn-unticked-promoted-constructors
         -fno-warn-partial-type-signatures
         -fno-warn-missing-signatures
         -fno-warn-type-defaults
         -fno-warn-orphans
    build-depends:
        hspec                   >= 2.9
      , QuickCheck              >= 2.10
      , quickcheck-instances

--------------------------------------------------------------------------------
-- * Main Library

library
    import:           setup
    exposed-modules:
     HGeometry.Point.EuclideanDistance
     HGeometry.Point.Orientation
     HGeometry.Point
      -- HGeometry.Point.Affine

    reexported-modules:
        HGeometry.Point.Unpacked
      , HGeometry.Point.Class
      , HGeometry.Point.PointF

    other-modules:
     HGeometry.Point.Orientation.Degenerate


    -- other-extensions:
    hs-source-dirs:   src
    build-depends:
        hgeometry-point:shared
     ,  hgeometry-point:newtype
     ,  hgeometry-point:pointf
     ,  hgeometry-vector

--------------------------------------------------------------------------------
-- * Shared

-- Don't use any signatures here; so that either a sig or an implementation can import this
-- library

library shared
    import:           setup
    -- visibility: public
    exposed-modules:
      HGeometry.Point.Class

    hs-source-dirs: src-shared
    build-depends:
      hgeometry-vector:shared        >= 1.0.0.0

--------------------------------------------------------------------------------
-- * Signatures for everything that is vector-like.

library sig-point
    import:           setup
    visibility: public
    signatures:
      Point
      -- Point.Affine
    build-depends:
        hgeometry-vector
      , hgeometry-vector:sig-dim
      , hgeometry-point:shared

    -- exposed-modules:
      -- HGeometry.Properties

    -- other-modules:
    -- other-extensions:
    hs-source-dirs:   sig-point

--------------------------------------------------------------------------------
-- * Point Implementations

-- this one should not depend on Vector itself; so that we can
-- instantiate it with any sort of vector.
library pointf
    import: setup
    visibility: public
    hs-source-dirs: src-pointf
    exposed-modules:
      HGeometry.Point.PointF
    build-depends:
        hgeometry-vector:shared        >= 1.0.0.0
      , hgeometry-point:shared

-- this one should not depend on Vector itself; so that we can
-- instantiate it with any sort of vector.
library newtype
    import: setup
    visibility: public
    hs-source-dirs: src-newtype
    exposed-modules:
      HGeometry.Point.Unpacked
    build-depends:
        hgeometry-vector              >= 1.0.0.0
      , hgeometry-point:shared        >= 1.0.0.0
      , hgeometry-point:pointf        >= 1.0.0.0

--------------------------------------------------------------------------------
-- * Generic Test stup

common hgeometry-point-test
    import:           setup, test-setup
    hs-source-dirs:   test
    build-tool-depends: hspec-discover:hspec-discover
    other-modules:
       GenericSpec
       Spec
       Point2Spec
    build-depends:
       -- , hgeometry-point
       , hgeometry-point
       , hgeometry-vector:numtypes
       , hgeometry-vector

    -- mixins:
    --      hgeometry-vector
    --    , hgeometry-point:newtype

-- ----------------------------------------
-- -- * Concrete Test stuites

-- test-suite hgeometry-point-test-int
--     import:           setup, test-setup, hgeometry-point-test
--     type:             exitcode-stdio-1.0
--     main-is:          Main.hs
--     other-modules:
--         IntSpec
--     hs-source-dirs:   test-int
--     mixins:
--          hgeometry-vector:numtypes (Int as R)

test-suite hgeometry-point-test-double
   import:           setup, test-setup, hgeometry-point-test
   type:             exitcode-stdio-1.0
   main-is:          Main.hs
   other-modules:
       DoubleSpec
   hs-source-dirs:   test-double
   mixins:
        hgeometry-vector:numtypes (Double as R)
