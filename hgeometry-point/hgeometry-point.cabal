cabal-version:      3.4
name:               hgeometry-point
version:            1.0.0.0
-- synopsis:
-- description:
license:            MIT
license-file:       LICENSE
author:             Frank Staals
maintainer:         frank@fstaals.net
-- copyright:
category:           Geometry
build-type:         Simple
extra-doc-files:    CHANGELOG.md
-- extra-source-files:

--------------------------------------------------------------------------------

common setup
    ghc-options: -O2 -Wall -fno-warn-unticked-promoted-constructors -fno-warn-type-defaults

    build-depends:
        base                    >= 4.16.4.0
      , containers              >= 0.6
      , vector                  >= 0.13
      , lens                    >= 5.2
      , deepseq                 >= 1.1
      , semigroupoids           >= 5
      , semigroups              >= 0.18
      , random                  >= 1.2
      , witherable              >= 0.4

      , ghc-typelits-natnormalise >= 0.7.7
      , ghc-typelits-knownnat     >= 0.7.6

    default-language: GHC2021

    default-extensions:
        DataKinds
      , TypeFamilies
      , GADTs
      , KindSignatures
      , ScopedTypeVariables
      , DerivingStrategies
      , DerivingVia
      , GeneralizedNewtypeDeriving
      , DeriveGeneric
      , DeriveFunctor
      , PatternSynonyms
      , TupleSections
      , LambdaCase
      , ViewPatterns
      , FunctionalDependencies

common test-setup
    ghc-options:
         -Wall
         -fno-warn-unticked-promoted-constructors
         -fno-warn-partial-type-signatures
         -fno-warn-missing-signatures
         -fno-warn-type-defaults
         -fno-warn-orphans
    build-depends:
        hspec                   >= 2.9
      , QuickCheck              >= 2.10
      , quickcheck-instances

--------------------------------------------------------------------------------
-- * Main Library

-- library
--     import:           setup
--     exposed-modules:
--       HGeometry.Point
--       HGeometry.Point.Affine
--       -- HGeometry.Vector.Metric
--       -- HGeometry.Vector.Metric.Radical
--
--     -- re-exported-modules:
--     --   HGeometry.Properties
--
--     -- other-modules:
--     -- other-extensions:
--     hs-source-dirs:   src
--     build-depends:
--         hgeometry-point:sig-point
-- -- I wonder if we should create e.g. a 'fractional' library that would export
-- -- all *.Fractional modules,
-- --

--------------------------------------------------------------------------------
-- * Signatures for everything that is vector-like.

-- library sig-point
--     import:           setup
--     visibility: public
--     signatures:
--       Point
--       Point.Affine
--
--     -- exposed-modules:
--       -- HGeometry.Properties
--
--     -- other-modules:
--     -- other-extensions:
--     hs-source-dirs:   sig-point

--------------------------------------------------------------------------------
-- * Point Implementations

library newtype
  import: setup
  visibility: public
  hs-source-dirs: src-newtype
  exposed-modules:
    HGeometry.Point.PointF
  build-depends:
        hgeometry-vector        >= 1.0.0.0
      , hgeometry-vector:numtypes
      , hgeometry-vector:vector2

  mixins:
       , hgeometry-vector
           requires
           ( Vector          as HGeometry.Vector.Vector2
           , Vector.Additive as HGeometry.Vector.Vector2
           , D               as HGeometry.Vector.Vector2
           )

--       hgeometry-point
--     , hgeometry-point:signatures

  -- mixins:
  --      hgeometry-point:newtype
  --        requires
  --        ( D               as HGeometry.Vector
  --        , Vector          as HGeometry.Vector
  --        , Vector.Affine   as HGeometry.Vector
  --        )


--------------------------------------------------------------------------------
-- * Generic Test stup

common hgeometry-point-test
    import:           setup, test-setup
    hs-source-dirs:   test
    build-tool-depends: hspec-discover:hspec-discover
    other-modules:
       GenericSpec
       Spec
       Point2Spec
    build-depends:
         -- hgeometry-point
       , hgeometry-point:newtype
       , hgeometry-vector:numtypes
       , hgeometry-vector:vector2

--     mixins:
--        -- , hgeometry-vector:vector2
--        --     ( HGeometry.Vector.Vector2 as Vector
--        --     , HGeometry.Vector.Vector2 as Vector.Additive
--        --     , HGeometry.Vector.Vector2 as D
--        --     )
--        , hgeometry-point:newtype
--            requires
--            ( Vector          as HGeometry.Vector.Vector2
--            , Vector.Additive as HGeometry.Vector.Vector2
--            , D               as HGeometry.Vector.Vector2
--            )
--        -- , hgeometry-point:newtype
       --     requires
       --     ( Vector          as HGeometry.Vector.Vector2
       --     , Vector.Additive as HGeometry.Vector.Vector2
       --     , D               as HGeometry.Vector.Vector2
       --     )

----------------------------------------
-- * Concrete Test stuites

-- test-suite hgeometry-point-test-int
--     import:           setup, test-setup, hgeometry-point-test
--     type:             exitcode-stdio-1.0
--     main-is:          Main.hs
--     other-modules:
--         IntSpec
--     hs-source-dirs:   test-int
--     mixins:
--          hgeometry-vector:numtypes (Int as R)

--test-suite hgeometry-point-test-double
--    import:           setup, test-setup, hgeometry-point-test
--    type:             exitcode-stdio-1.0
--    main-is:          Main.hs
--    other-modules:
--        DoubleSpec
--    hs-source-dirs:   test-double
--    mixins:
--         hgeometry-vector:numtypes (Double as R)
