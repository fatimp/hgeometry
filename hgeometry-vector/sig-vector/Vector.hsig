{-# LANGUAGE UndecidableInstances #-}
{-# LANGUAGE AllowAmbiguousTypes #-}
--------------------------------------------------------------------------------
-- |
-- Module      :  Vector
-- Copyright   :  (C) Frank Staals
-- License     :  see the LICENSE file
-- Maintainer  :  Frank Staals
--
-- Signature for D-dimensional Vectors
--
--------------------------------------------------------------------------------
signature Vector where

import           Control.DeepSeq
import           Control.Lens
import           D
import qualified Data.Functor.Apply as Apply
import           GHC.Generics (Generic)
import           HGeometry.Vector.Class
import           R

--------------------------------------------------------------------------------

-- $setup
-- >>> let myVector2 = Vector2 5 11

-- | The Vector data type
data Vector

-- | Vector is actually a D-dimension vector whose coordinates are of type R.
instance V_ Vector D R

instance Eq R      => Eq Vector
instance Ord R     => Ord Vector
instance NFData R  => NFData Vector
instance Generic R => Generic Vector

--------------------------------------------------------------------------------
-- * Construcitng Vectors

-- | Generates a vector from an Applicative operation (that takes the
-- index)
generateA :: (Applicative f) => (Int -> f R) -> f Vector

--------------------------------------------------------------------------------
-- * Accessing the vector Data

-- | Traversal over the components of the vector
--
-- >>> myVector2^..components
-- [5,11]
components :: IndexedTraversal1' Int Vector R

-- | Lens to access the i^th coordinate.
component' :: Int -> IndexedTraversal' Int Vector R

--------------------------------------------------------------------------------
-- * Additive operations

-- | Apply a function to merge the 'non-zero' components of two
-- vectors, unioning the rest of the values.
liftU2  :: (R -> R -> R) -> Vector -> Vector -> Vector

-- | Apply an Applicative function to the components of two vectors.
liftI2A :: Apply.Apply f => (R -> R -> f R) -> Vector -> Vector -> f Vector
